(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VueNouislider"] = factory();
	else
		root["VueNouislider"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLQyxTQUFTLGFBQVQsR0FBTCxJQUFrQyxDQUFDLEdBQUVDLElBQUgsRUFBUyxNQUFULENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU1DLENBQU4sRUFBUztBQUNWO0FBQ0EsS0FBRyxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXJCLEVBQ0NKLElBQUlJLE1BQUo7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJOLENBQWpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/* styles */\n__webpack_require__(5)\n\nvar Component = __webpack_require__(6)(\n  /* script */\n  __webpack_require__(4),\n  /* template */\n  __webpack_require__(7),\n  /* scopeId */\n  \"data-v-e91d3600\",\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/Users/besmart/Sites/gitHub/vue-nouislider/src/components/noUiSlider.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] noUiSlider.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-e91d3600\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-e91d3600\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ub1VpU2xpZGVyLnZ1ZT8yOWRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBLHFCQUF5Tzs7QUFFek87QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGlEQUFpRCxJQUFJO0FBQ3BJLG1DQUFtQzs7QUFFbkM7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjAsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1lOTFkMzYwMFxcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hc2Fzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9ub1VpU2xpZGVyLnZ1ZVwiKVxuXG52YXIgQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIikoXG4gIC8qIHNjcmlwdCAqL1xuICByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9ub1VpU2xpZGVyLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTkxZDM2MDBcXFwifSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vbm9VaVNsaWRlci52dWVcIiksXG4gIC8qIHNjb3BlSWQgKi9cbiAgXCJkYXRhLXYtZTkxZDM2MDBcIixcbiAgLyogY3NzTW9kdWxlcyAqL1xuICBudWxsXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIi9Vc2Vycy9iZXNtYXJ0L1NpdGVzL2dpdEh1Yi92dWUtbm91aXNsaWRlci9zcmMvY29tcG9uZW50cy9ub1VpU2xpZGVyLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIG5vVWlTbGlkZXIudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCB0ZW1wbGF0ZXMsIHRoZXkgc2hvdWxkIHVzZSByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LWU5MWQzNjAwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtZTkxZDM2MDBcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbn0pKCl9XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvbm9VaVNsaWRlci52dWVcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_noUiSlider_vue__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_noUiSlider_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_noUiSlider_vue__);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"noUiSlider\", function() { return __WEBPACK_IMPORTED_MODULE_0__components_noUiSlider_vue___default.a; });\n/* harmony export (immutable) */ __webpack_exports__[\"install\"] = install;\n\n\n// Install the components\nfunction install(Vue) {\n  Vue.component('nouislider', __WEBPACK_IMPORTED_MODULE_0__components_noUiSlider_vue___default.a);\n  /* -- Add more components here -- */\n}\n\n// Expose the components\n\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nvar plugin = {\n  /* eslint-disable no-undef */\n  version: \"1.0.0\",\n  install: install\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (plugin);\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJpbnN0YWxsIiwiVnVlIiwiY29tcG9uZW50IiwicGx1Z2luIiwidmVyc2lvbiIsIkdsb2JhbFZ1ZSIsIndpbmRvdyIsImdsb2JhbCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTtBQUNPLFNBQVNBLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQzVCQSxNQUFJQyxTQUFKLENBQWMsWUFBZCxFQUE0QixrRUFBNUI7QUFDQTtBQUNEOztBQUVEO0FBQ0E7O0FBS0E7QUFDQTs7QUFFQTtBQUNBLElBQU1DLFNBQVM7QUFDYjtBQUNBQyxXQUFTLE9BRkk7QUFHYko7QUFIYSxDQUFmOztBQU1BLCtEQUFlRyxNQUFmOztBQUVBO0FBQ0EsSUFBSUUsWUFBWSxJQUFoQjtBQUNBLElBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQ0QsY0FBWUMsT0FBT0wsR0FBbkI7QUFDRCxDQUZELE1BRU8sSUFBSSxPQUFPTSxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ3hDRixjQUFZRSxPQUFPTixHQUFuQjtBQUNEO0FBQ0QsSUFBSUksU0FBSixFQUFlO0FBQ2JBLFlBQVVHLEdBQVYsQ0FBY0wsTUFBZDtBQUNELEMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBub1VpU2xpZGVyIGZyb20gJy4vY29tcG9uZW50cy9ub1VpU2xpZGVyLnZ1ZSdcblxuLy8gSW5zdGFsbCB0aGUgY29tcG9uZW50c1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwgKFZ1ZSkge1xuICBWdWUuY29tcG9uZW50KCdub3Vpc2xpZGVyJywgbm9VaVNsaWRlcilcbiAgLyogLS0gQWRkIG1vcmUgY29tcG9uZW50cyBoZXJlIC0tICovXG59XG5cbi8vIEV4cG9zZSB0aGUgY29tcG9uZW50c1xuZXhwb3J0IHtcbiAgbm9VaVNsaWRlcixcbiAgLyogLS0gQWRkIG1vcmUgY29tcG9uZW50cyBoZXJlIC0tICovXG59XG5cbi8qIC0tIFBsdWdpbiBkZWZpbml0aW9uICYgQXV0by1pbnN0YWxsIC0tICovXG4vKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gbW9kaWZ5IHRoZSBjb2RlIGJlbG93ICovXG5cbi8vIFBsdWdpblxuY29uc3QgcGx1Z2luID0ge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICB2ZXJzaW9uOiBWRVJTSU9OLFxuICBpbnN0YWxsLFxufVxuXG5leHBvcnQgZGVmYXVsdCBwbHVnaW5cblxuLy8gQXV0by1pbnN0YWxsXG5sZXQgR2xvYmFsVnVlID0gbnVsbFxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIEdsb2JhbFZ1ZSA9IHdpbmRvdy5WdWVcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gZ2xvYmFsLlZ1ZVxufVxuaWYgKEdsb2JhbFZ1ZSkge1xuICBHbG9iYWxWdWUudXNlKHBsdWdpbilcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! nouislider - 9.2.0 - 2017-01-11 10:35:34 */\n\n(function (factory) {\n\n\tif (true) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\n\t\t// Node/CommonJS\n\t\tmodule.exports = factory();\n\t} else {\n\n\t\t// Browser globals\n\t\twindow.noUiSlider = factory();\n\t}\n})(function () {\n\n\t'use strict';\n\n\tvar VERSION = '9.2.0';\n\n\t// Creates a node, adds it to target, returns the new node.\n\tfunction addNodeTo(target, className) {\n\t\tvar div = document.createElement('div');\n\t\taddClass(div, className);\n\t\ttarget.appendChild(div);\n\t\treturn div;\n\t}\n\n\t// Removes duplicates from an array.\n\tfunction unique(array) {\n\t\treturn array.filter(function (a) {\n\t\t\treturn !this[a] ? this[a] = true : false;\n\t\t}, {});\n\t}\n\n\t// Round a value to the closest 'to'.\n\tfunction closest(value, to) {\n\t\treturn Math.round(value / to) * to;\n\t}\n\n\t// Current position of an element relative to the document.\n\tfunction offset(elem, orientation) {\n\n\t\tvar rect = elem.getBoundingClientRect(),\n\t\t    doc = elem.ownerDocument,\n\t\t    docElem = doc.documentElement,\n\t\t    pageOffset = getPageOffset();\n\n\t\t// getBoundingClientRect contains left scroll in Chrome on Android.\n\t\t// I haven't found a feature detection that proves this. Worst case\n\t\t// scenario on mis-match: the 'tap' feature on horizontal sliders breaks.\n\t\tif (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\n\t\t\tpageOffset.x = 0;\n\t\t}\n\n\t\treturn orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;\n\t}\n\n\t// Checks whether a value is numerical.\n\tfunction isNumeric(a) {\n\t\treturn typeof a === 'number' && !isNaN(a) && isFinite(a);\n\t}\n\n\t// Sets a class and removes it after [duration] ms.\n\tfunction addClassFor(element, className, duration) {\n\t\tif (duration > 0) {\n\t\t\taddClass(element, className);\n\t\t\tsetTimeout(function () {\n\t\t\t\tremoveClass(element, className);\n\t\t\t}, duration);\n\t\t}\n\t}\n\n\t// Limits a value to 0 - 100\n\tfunction limit(a) {\n\t\treturn Math.max(Math.min(a, 100), 0);\n\t}\n\n\t// Wraps a variable as an array, if it isn't one yet.\n\t// Note that an input array is returned by reference!\n\tfunction asArray(a) {\n\t\treturn Array.isArray(a) ? a : [a];\n\t}\n\n\t// Counts decimals\n\tfunction countDecimals(numStr) {\n\t\tnumStr = String(numStr);\n\t\tvar pieces = numStr.split(\".\");\n\t\treturn pieces.length > 1 ? pieces[1].length : 0;\n\t}\n\n\t// http://youmightnotneedjquery.com/#add_class\n\tfunction addClass(el, className) {\n\t\tif (el.classList) {\n\t\t\tel.classList.add(className);\n\t\t} else {\n\t\t\tel.className += ' ' + className;\n\t\t}\n\t}\n\n\t// http://youmightnotneedjquery.com/#remove_class\n\tfunction removeClass(el, className) {\n\t\tif (el.classList) {\n\t\t\tel.classList.remove(className);\n\t\t} else {\n\t\t\tel.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n\t\t}\n\t}\n\n\t// https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/\n\tfunction hasClass(el, className) {\n\t\treturn el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes\n\tfunction getPageOffset() {\n\n\t\tvar supportPageOffset = window.pageXOffset !== undefined,\n\t\t    isCSS1Compat = (document.compatMode || \"\") === \"CSS1Compat\",\n\t\t    x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? document.documentElement.scrollLeft : document.body.scrollLeft,\n\t\t    y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? document.documentElement.scrollTop : document.body.scrollTop;\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n\n\t// we provide a function to compute constants instead\n\t// of accessing window.* as soon as the module needs it\n\t// so that we do not compute anything if not needed\n\tfunction getActions() {\n\n\t\t// Determine the events to bind. IE11 implements pointerEvents without\n\t\t// a prefix, which breaks compatibility with the IE10 implementation.\n\t\treturn window.navigator.pointerEnabled ? {\n\t\t\tstart: 'pointerdown',\n\t\t\tmove: 'pointermove',\n\t\t\tend: 'pointerup'\n\t\t} : window.navigator.msPointerEnabled ? {\n\t\t\tstart: 'MSPointerDown',\n\t\t\tmove: 'MSPointerMove',\n\t\t\tend: 'MSPointerUp'\n\t\t} : {\n\t\t\tstart: 'mousedown touchstart',\n\t\t\tmove: 'mousemove touchmove',\n\t\t\tend: 'mouseup touchend'\n\t\t};\n\t}\n\n\t// Value calculation\n\n\t// Determine the size of a sub-range in relation to a full range.\n\tfunction subRangeRatio(pa, pb) {\n\t\treturn 100 / (pb - pa);\n\t}\n\n\t// (percentage) How many percent is this value of this range?\n\tfunction fromPercentage(range, value) {\n\t\treturn value * 100 / (range[1] - range[0]);\n\t}\n\n\t// (percentage) Where is this value on this range?\n\tfunction toPercentage(range, value) {\n\t\treturn fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]);\n\t}\n\n\t// (value) How much is this percentage on this range?\n\tfunction isPercentage(range, value) {\n\t\treturn value * (range[1] - range[0]) / 100 + range[0];\n\t}\n\n\t// Range conversion\n\n\tfunction getJ(value, arr) {\n\n\t\tvar j = 1;\n\n\t\twhile (value >= arr[j]) {\n\t\t\tj += 1;\n\t\t}\n\n\t\treturn j;\n\t}\n\n\t// (percentage) Input a value, find where, on a scale of 0-100, it applies.\n\tfunction toStepping(xVal, xPct, value) {\n\n\t\tif (value >= xVal.slice(-1)[0]) {\n\t\t\treturn 100;\n\t\t}\n\n\t\tvar j = getJ(value, xVal),\n\t\t    va,\n\t\t    vb,\n\t\t    pa,\n\t\t    pb;\n\n\t\tva = xVal[j - 1];\n\t\tvb = xVal[j];\n\t\tpa = xPct[j - 1];\n\t\tpb = xPct[j];\n\n\t\treturn pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);\n\t}\n\n\t// (value) Input a percentage, find where it is on the specified range.\n\tfunction fromStepping(xVal, xPct, value) {\n\n\t\t// There is no range group that fits 100\n\t\tif (value >= 100) {\n\t\t\treturn xVal.slice(-1)[0];\n\t\t}\n\n\t\tvar j = getJ(value, xPct),\n\t\t    va,\n\t\t    vb,\n\t\t    pa,\n\t\t    pb;\n\n\t\tva = xVal[j - 1];\n\t\tvb = xVal[j];\n\t\tpa = xPct[j - 1];\n\t\tpb = xPct[j];\n\n\t\treturn isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\n\t}\n\n\t// (percentage) Get the step that applies at a certain value.\n\tfunction getStep(xPct, xSteps, snap, value) {\n\n\t\tif (value === 100) {\n\t\t\treturn value;\n\t\t}\n\n\t\tvar j = getJ(value, xPct),\n\t\t    a,\n\t\t    b;\n\n\t\t// If 'snap' is set, steps are used as fixed points on the slider.\n\t\tif (snap) {\n\n\t\t\ta = xPct[j - 1];\n\t\t\tb = xPct[j];\n\n\t\t\t// Find the closest position, a or b.\n\t\t\tif (value - a > (b - a) / 2) {\n\t\t\t\treturn b;\n\t\t\t}\n\n\t\t\treturn a;\n\t\t}\n\n\t\tif (!xSteps[j - 1]) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);\n\t}\n\n\t// Entry parsing\n\n\tfunction handleEntryPoint(index, value, that) {\n\n\t\tvar percentage;\n\n\t\t// Wrap numerical input in an array.\n\t\tif (typeof value === \"number\") {\n\t\t\tvalue = [value];\n\t\t}\n\n\t\t// Reject any invalid input, by testing whether value is an array.\n\t\tif (Object.prototype.toString.call(value) !== '[object Array]') {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'range' contains invalid value.\");\n\t\t}\n\n\t\t// Covert min/max syntax to 0 and 100.\n\t\tif (index === 'min') {\n\t\t\tpercentage = 0;\n\t\t} else if (index === 'max') {\n\t\t\tpercentage = 100;\n\t\t} else {\n\t\t\tpercentage = parseFloat(index);\n\t\t}\n\n\t\t// Check for correct input.\n\t\tif (!isNumeric(percentage) || !isNumeric(value[0])) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'range' value isn't numeric.\");\n\t\t}\n\n\t\t// Store values.\n\t\tthat.xPct.push(percentage);\n\t\tthat.xVal.push(value[0]);\n\n\t\t// NaN will evaluate to false too, but to keep\n\t\t// logging clear, set step explicitly. Make sure\n\t\t// not to override the 'step' setting with false.\n\t\tif (!percentage) {\n\t\t\tif (!isNaN(value[1])) {\n\t\t\t\tthat.xSteps[0] = value[1];\n\t\t\t}\n\t\t} else {\n\t\t\tthat.xSteps.push(isNaN(value[1]) ? false : value[1]);\n\t\t}\n\n\t\tthat.xHighestCompleteStep.push(0);\n\t}\n\n\tfunction handleStepPoint(i, n, that) {\n\n\t\t// Ignore 'false' stepping.\n\t\tif (!n) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Factor to range ratio\n\t\tthat.xSteps[i] = fromPercentage([that.xVal[i], that.xVal[i + 1]], n) / subRangeRatio(that.xPct[i], that.xPct[i + 1]);\n\n\t\tvar totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i];\n\t\tvar highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);\n\t\tvar step = that.xVal[i] + that.xNumSteps[i] * highestStep;\n\n\t\tthat.xHighestCompleteStep[i] = step;\n\t}\n\n\t// Interface\n\n\t// The interface to Spectrum handles all direction-based\n\t// conversions, so the above values are unaware.\n\n\tfunction Spectrum(entry, snap, direction, singleStep) {\n\n\t\tthis.xPct = [];\n\t\tthis.xVal = [];\n\t\tthis.xSteps = [singleStep || false];\n\t\tthis.xNumSteps = [false];\n\t\tthis.xHighestCompleteStep = [];\n\n\t\tthis.snap = snap;\n\t\tthis.direction = direction;\n\n\t\tvar index,\n\t\t    ordered = [/* [0, 'min'], [1, '50%'], [2, 'max'] */];\n\n\t\t// Map the object keys to an array.\n\t\tfor (index in entry) {\n\t\t\tif (entry.hasOwnProperty(index)) {\n\t\t\t\tordered.push([entry[index], index]);\n\t\t\t}\n\t\t}\n\n\t\t// Sort all entries by value (numeric sort).\n\t\tif (ordered.length && _typeof(ordered[0][0]) === \"object\") {\n\t\t\tordered.sort(function (a, b) {\n\t\t\t\treturn a[0][0] - b[0][0];\n\t\t\t});\n\t\t} else {\n\t\t\tordered.sort(function (a, b) {\n\t\t\t\treturn a[0] - b[0];\n\t\t\t});\n\t\t}\n\n\t\t// Convert all entries to subranges.\n\t\tfor (index = 0; index < ordered.length; index++) {\n\t\t\thandleEntryPoint(ordered[index][1], ordered[index][0], this);\n\t\t}\n\n\t\t// Store the actual step values.\n\t\t// xSteps is sorted in the same order as xPct and xVal.\n\t\tthis.xNumSteps = this.xSteps.slice(0);\n\n\t\t// Convert all numeric steps to the percentage of the subrange they represent.\n\t\tfor (index = 0; index < this.xNumSteps.length; index++) {\n\t\t\thandleStepPoint(index, this.xNumSteps[index], this);\n\t\t}\n\t}\n\n\tSpectrum.prototype.getMargin = function (value) {\n\n\t\tvar step = this.xNumSteps[0];\n\n\t\tif (step && value / step % 1 !== 0) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'limit', 'margin' and 'padding' must be divisible by step.\");\n\t\t}\n\n\t\treturn this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false;\n\t};\n\n\tSpectrum.prototype.toStepping = function (value) {\n\n\t\tvalue = toStepping(this.xVal, this.xPct, value);\n\n\t\treturn value;\n\t};\n\n\tSpectrum.prototype.fromStepping = function (value) {\n\n\t\treturn fromStepping(this.xVal, this.xPct, value);\n\t};\n\n\tSpectrum.prototype.getStep = function (value) {\n\n\t\tvalue = getStep(this.xPct, this.xSteps, this.snap, value);\n\n\t\treturn value;\n\t};\n\n\tSpectrum.prototype.getNearbySteps = function (value) {\n\n\t\tvar j = getJ(value, this.xPct);\n\n\t\treturn {\n\t\t\tstepBefore: { startValue: this.xVal[j - 2], step: this.xNumSteps[j - 2], highestStep: this.xHighestCompleteStep[j - 2] },\n\t\t\tthisStep: { startValue: this.xVal[j - 1], step: this.xNumSteps[j - 1], highestStep: this.xHighestCompleteStep[j - 1] },\n\t\t\tstepAfter: { startValue: this.xVal[j - 0], step: this.xNumSteps[j - 0], highestStep: this.xHighestCompleteStep[j - 0] }\n\t\t};\n\t};\n\n\tSpectrum.prototype.countStepDecimals = function () {\n\t\tvar stepDecimals = this.xNumSteps.map(countDecimals);\n\t\treturn Math.max.apply(null, stepDecimals);\n\t};\n\n\t// Outside testing\n\tSpectrum.prototype.convert = function (value) {\n\t\treturn this.getStep(this.toStepping(value));\n\t};\n\n\t/*\tEvery input option is tested and parsed. This'll prevent\r\n \tendless validation in internal methods. These tests are\r\n \tstructured with an item for every option available. An\r\n \toption can be marked as required by setting the 'r' flag.\r\n \tThe testing function is provided with three arguments:\r\n \t\t- The provided value for the option;\r\n \t\t- A reference to the options object;\r\n \t\t- The name for the option;\r\n \r\n \tThe testing function returns false when an error is detected,\r\n \tor true when everything is OK. It can also modify the option\r\n \tobject, to make sure all values can be correctly looped elsewhere. */\n\n\tvar defaultFormatter = { 'to': function to(value) {\n\t\t\treturn value !== undefined && value.toFixed(2);\n\t\t}, 'from': Number };\n\n\tfunction testStep(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'step' is not numeric.\");\n\t\t}\n\n\t\t// The step option can still be used to set stepping\n\t\t// for linear sliders. Overwritten if set in 'range'.\n\t\tparsed.singleStep = entry;\n\t}\n\n\tfunction testRange(parsed, entry) {\n\n\t\t// Filter incorrect input.\n\t\tif ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) !== 'object' || Array.isArray(entry)) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'range' is not an object.\");\n\t\t}\n\n\t\t// Catch missing start or end.\n\t\tif (entry.min === undefined || entry.max === undefined) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): Missing 'min' or 'max' in 'range'.\");\n\t\t}\n\n\t\t// Catch equal start or end.\n\t\tif (entry.min === entry.max) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'range' 'min' and 'max' cannot be equal.\");\n\t\t}\n\n\t\tparsed.spectrum = new Spectrum(entry, parsed.snap, parsed.dir, parsed.singleStep);\n\t}\n\n\tfunction testStart(parsed, entry) {\n\n\t\tentry = asArray(entry);\n\n\t\t// Validate input. Values aren't tested, as the public .val method\n\t\t// will always provide a valid location.\n\t\tif (!Array.isArray(entry) || !entry.length) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'start' option is incorrect.\");\n\t\t}\n\n\t\t// Store the number of handles.\n\t\tparsed.handles = entry.length;\n\n\t\t// When the slider is initialized, the .val method will\n\t\t// be called with the start options.\n\t\tparsed.start = entry;\n\t}\n\n\tfunction testSnap(parsed, entry) {\n\n\t\t// Enforce 100% stepping within subranges.\n\t\tparsed.snap = entry;\n\n\t\tif (typeof entry !== 'boolean') {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'snap' option must be a boolean.\");\n\t\t}\n\t}\n\n\tfunction testAnimate(parsed, entry) {\n\n\t\t// Enforce 100% stepping within subranges.\n\t\tparsed.animate = entry;\n\n\t\tif (typeof entry !== 'boolean') {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'animate' option must be a boolean.\");\n\t\t}\n\t}\n\n\tfunction testAnimationDuration(parsed, entry) {\n\n\t\tparsed.animationDuration = entry;\n\n\t\tif (typeof entry !== 'number') {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'animationDuration' option must be a number.\");\n\t\t}\n\t}\n\n\tfunction testConnect(parsed, entry) {\n\n\t\tvar connect = [false];\n\t\tvar i;\n\n\t\t// Map legacy options\n\t\tif (entry === 'lower') {\n\t\t\tentry = [true, false];\n\t\t} else if (entry === 'upper') {\n\t\t\tentry = [false, true];\n\t\t}\n\n\t\t// Handle boolean options\n\t\tif (entry === true || entry === false) {\n\n\t\t\tfor (i = 1; i < parsed.handles; i++) {\n\t\t\t\tconnect.push(entry);\n\t\t\t}\n\n\t\t\tconnect.push(false);\n\t\t}\n\n\t\t// Reject invalid input\n\t\telse if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {\n\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'connect' option doesn't match handle count.\");\n\t\t\t} else {\n\t\t\t\tconnect = entry;\n\t\t\t}\n\n\t\tparsed.connect = connect;\n\t}\n\n\tfunction testOrientation(parsed, entry) {\n\n\t\t// Set orientation to an a numerical value for easy\n\t\t// array selection.\n\t\tswitch (entry) {\n\t\t\tcase 'horizontal':\n\t\t\t\tparsed.ort = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'vertical':\n\t\t\t\tparsed.ort = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'orientation' option is invalid.\");\n\t\t}\n\t}\n\n\tfunction testMargin(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'margin' option must be numeric.\");\n\t\t}\n\n\t\t// Issue #582\n\t\tif (entry === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tparsed.margin = parsed.spectrum.getMargin(entry);\n\n\t\tif (!parsed.margin) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'margin' option is only supported on linear sliders.\");\n\t\t}\n\t}\n\n\tfunction testLimit(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'limit' option must be numeric.\");\n\t\t}\n\n\t\tparsed.limit = parsed.spectrum.getMargin(entry);\n\n\t\tif (!parsed.limit || parsed.handles < 2) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'limit' option is only supported on linear sliders with 2 or more handles.\");\n\t\t}\n\t}\n\n\tfunction testPadding(parsed, entry) {\n\n\t\tif (!isNumeric(entry)) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be numeric.\");\n\t\t}\n\n\t\tif (entry === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tparsed.padding = parsed.spectrum.getMargin(entry);\n\n\t\tif (!parsed.padding) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option is only supported on linear sliders.\");\n\t\t}\n\n\t\tif (parsed.padding < 0) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be a positive number.\");\n\t\t}\n\n\t\tif (parsed.padding >= 50) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'padding' option must be less than half the range.\");\n\t\t}\n\t}\n\n\tfunction testDirection(parsed, entry) {\n\n\t\t// Set direction as a numerical value for easy parsing.\n\t\t// Invert connection for RTL sliders, so that the proper\n\t\t// handles get the connect/background classes.\n\t\tswitch (entry) {\n\t\t\tcase 'ltr':\n\t\t\t\tparsed.dir = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'rtl':\n\t\t\t\tparsed.dir = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'direction' option was not recognized.\");\n\t\t}\n\t}\n\n\tfunction testBehaviour(parsed, entry) {\n\n\t\t// Make sure the input is a string.\n\t\tif (typeof entry !== 'string') {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'behaviour' must be a string containing options.\");\n\t\t}\n\n\t\t// Check if the string contains any keywords.\n\t\t// None are required.\n\t\tvar tap = entry.indexOf('tap') >= 0;\n\t\tvar drag = entry.indexOf('drag') >= 0;\n\t\tvar fixed = entry.indexOf('fixed') >= 0;\n\t\tvar snap = entry.indexOf('snap') >= 0;\n\t\tvar hover = entry.indexOf('hover') >= 0;\n\n\t\tif (fixed) {\n\n\t\t\tif (parsed.handles !== 2) {\n\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'fixed' behaviour must be used with 2 handles\");\n\t\t\t}\n\n\t\t\t// Use margin to enforce fixed state\n\t\t\ttestMargin(parsed, parsed.start[1] - parsed.start[0]);\n\t\t}\n\n\t\tparsed.events = {\n\t\t\ttap: tap || snap,\n\t\t\tdrag: drag,\n\t\t\tfixed: fixed,\n\t\t\tsnap: snap,\n\t\t\thover: hover\n\t\t};\n\t}\n\n\tfunction testTooltips(parsed, entry) {\n\n\t\tif (entry === false) {\n\t\t\treturn;\n\t\t} else if (entry === true) {\n\n\t\t\tparsed.tooltips = [];\n\n\t\t\tfor (var i = 0; i < parsed.handles; i++) {\n\t\t\t\tparsed.tooltips.push(true);\n\t\t\t}\n\t\t} else {\n\n\t\t\tparsed.tooltips = asArray(entry);\n\n\t\t\tif (parsed.tooltips.length !== parsed.handles) {\n\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): must pass a formatter for all handles.\");\n\t\t\t}\n\n\t\t\tparsed.tooltips.forEach(function (formatter) {\n\t\t\t\tif (typeof formatter !== 'boolean' && ((typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) !== 'object' || typeof formatter.to !== 'function')) {\n\t\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'tooltips' must be passed a formatter or 'false'.\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction testFormat(parsed, entry) {\n\n\t\tparsed.format = entry;\n\n\t\t// Any object with a to and from method is supported.\n\t\tif (typeof entry.to === 'function' && typeof entry.from === 'function') {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'format' requires 'to' and 'from' methods.\");\n\t}\n\n\tfunction testCssPrefix(parsed, entry) {\n\n\t\tif (entry !== undefined && typeof entry !== 'string' && entry !== false) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'cssPrefix' must be a string or `false`.\");\n\t\t}\n\n\t\tparsed.cssPrefix = entry;\n\t}\n\n\tfunction testCssClasses(parsed, entry) {\n\n\t\tif (entry !== undefined && (typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) !== 'object') {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'cssClasses' must be an object.\");\n\t\t}\n\n\t\tif (typeof parsed.cssPrefix === 'string') {\n\t\t\tparsed.cssClasses = {};\n\n\t\t\tfor (var key in entry) {\n\t\t\t\tif (!entry.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tparsed.cssClasses[key] = parsed.cssPrefix + entry[key];\n\t\t\t}\n\t\t} else {\n\t\t\tparsed.cssClasses = entry;\n\t\t}\n\t}\n\n\tfunction testUseRaf(parsed, entry) {\n\t\tif (entry === true || entry === false) {\n\t\t\tparsed.useRequestAnimationFrame = entry;\n\t\t} else {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'useRequestAnimationFrame' option should be true (default) or false.\");\n\t\t}\n\t}\n\n\t// Test all developer settings and parse to assumption-safe values.\n\tfunction testOptions(options) {\n\n\t\t// To prove a fix for #537, freeze options here.\n\t\t// If the object is modified, an error will be thrown.\n\t\t// Object.freeze(options);\n\n\t\tvar parsed = {\n\t\t\tmargin: 0,\n\t\t\tlimit: 0,\n\t\t\tpadding: 0,\n\t\t\tanimate: true,\n\t\t\tanimationDuration: 300,\n\t\t\tformat: defaultFormatter\n\t\t};\n\n\t\t// Tests are executed in the order they are presented here.\n\t\tvar tests = {\n\t\t\t'step': { r: false, t: testStep },\n\t\t\t'start': { r: true, t: testStart },\n\t\t\t'connect': { r: true, t: testConnect },\n\t\t\t'direction': { r: true, t: testDirection },\n\t\t\t'snap': { r: false, t: testSnap },\n\t\t\t'animate': { r: false, t: testAnimate },\n\t\t\t'animationDuration': { r: false, t: testAnimationDuration },\n\t\t\t'range': { r: true, t: testRange },\n\t\t\t'orientation': { r: false, t: testOrientation },\n\t\t\t'margin': { r: false, t: testMargin },\n\t\t\t'limit': { r: false, t: testLimit },\n\t\t\t'padding': { r: false, t: testPadding },\n\t\t\t'behaviour': { r: true, t: testBehaviour },\n\t\t\t'format': { r: false, t: testFormat },\n\t\t\t'tooltips': { r: false, t: testTooltips },\n\t\t\t'cssPrefix': { r: false, t: testCssPrefix },\n\t\t\t'cssClasses': { r: false, t: testCssClasses },\n\t\t\t'useRequestAnimationFrame': { r: false, t: testUseRaf }\n\t\t};\n\n\t\tvar defaults = {\n\t\t\t'connect': false,\n\t\t\t'direction': 'ltr',\n\t\t\t'behaviour': 'tap',\n\t\t\t'orientation': 'horizontal',\n\t\t\t'cssPrefix': 'noUi-',\n\t\t\t'cssClasses': {\n\t\t\t\ttarget: 'target',\n\t\t\t\tbase: 'base',\n\t\t\t\torigin: 'origin',\n\t\t\t\thandle: 'handle',\n\t\t\t\thandleLower: 'handle-lower',\n\t\t\t\thandleUpper: 'handle-upper',\n\t\t\t\thorizontal: 'horizontal',\n\t\t\t\tvertical: 'vertical',\n\t\t\t\tbackground: 'background',\n\t\t\t\tconnect: 'connect',\n\t\t\t\tltr: 'ltr',\n\t\t\t\trtl: 'rtl',\n\t\t\t\tdraggable: 'draggable',\n\t\t\t\tdrag: 'state-drag',\n\t\t\t\ttap: 'state-tap',\n\t\t\t\tactive: 'active',\n\t\t\t\ttooltip: 'tooltip',\n\t\t\t\tpips: 'pips',\n\t\t\t\tpipsHorizontal: 'pips-horizontal',\n\t\t\t\tpipsVertical: 'pips-vertical',\n\t\t\t\tmarker: 'marker',\n\t\t\t\tmarkerHorizontal: 'marker-horizontal',\n\t\t\t\tmarkerVertical: 'marker-vertical',\n\t\t\t\tmarkerNormal: 'marker-normal',\n\t\t\t\tmarkerLarge: 'marker-large',\n\t\t\t\tmarkerSub: 'marker-sub',\n\t\t\t\tvalue: 'value',\n\t\t\t\tvalueHorizontal: 'value-horizontal',\n\t\t\t\tvalueVertical: 'value-vertical',\n\t\t\t\tvalueNormal: 'value-normal',\n\t\t\t\tvalueLarge: 'value-large',\n\t\t\t\tvalueSub: 'value-sub'\n\t\t\t},\n\t\t\t'useRequestAnimationFrame': true\n\t\t};\n\n\t\t// Run all options through a testing mechanism to ensure correct\n\t\t// input. It should be noted that options might get modified to\n\t\t// be handled properly. E.g. wrapping integers in arrays.\n\t\tObject.keys(tests).forEach(function (name) {\n\n\t\t\t// If the option isn't set, but it is required, throw an error.\n\t\t\tif (options[name] === undefined && defaults[name] === undefined) {\n\n\t\t\t\tif (tests[name].r) {\n\t\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): '\" + name + \"' is required.\");\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttests[name].t(parsed, options[name] === undefined ? defaults[name] : options[name]);\n\t\t});\n\n\t\t// Forward pips options\n\t\tparsed.pips = options.pips;\n\n\t\tvar styles = [['left', 'top'], ['right', 'bottom']];\n\n\t\t// Pre-define the styles.\n\t\tparsed.style = styles[parsed.dir][parsed.ort];\n\t\tparsed.styleOposite = styles[parsed.dir ? 0 : 1][parsed.ort];\n\n\t\treturn parsed;\n\t}\n\n\tfunction closure(target, options, originalOptions) {\n\n\t\tvar actions = getActions();\n\n\t\t// All variables local to 'closure' are prefixed with 'scope_'\n\t\tvar scope_Target = target;\n\t\tvar scope_Locations = [];\n\t\tvar scope_Base;\n\t\tvar scope_Handles;\n\t\tvar scope_HandleNumbers = [];\n\t\tvar scope_ActiveHandle = false;\n\t\tvar scope_Connects;\n\t\tvar scope_Spectrum = options.spectrum;\n\t\tvar scope_Values = [];\n\t\tvar scope_Events = {};\n\t\tvar scope_Self;\n\n\t\t// Append a origin to the base\n\t\tfunction addOrigin(base, handleNumber) {\n\n\t\t\tvar origin = addNodeTo(base, options.cssClasses.origin);\n\t\t\tvar handle = addNodeTo(origin, options.cssClasses.handle);\n\n\t\t\thandle.setAttribute('data-handle', handleNumber);\n\n\t\t\tif (handleNumber === 0) {\n\t\t\t\taddClass(handle, options.cssClasses.handleLower);\n\t\t\t} else if (handleNumber === options.handles - 1) {\n\t\t\t\taddClass(handle, options.cssClasses.handleUpper);\n\t\t\t}\n\n\t\t\treturn origin;\n\t\t}\n\n\t\t// Insert nodes for connect elements\n\t\tfunction addConnect(base, add) {\n\n\t\t\tif (!add) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn addNodeTo(base, options.cssClasses.connect);\n\t\t}\n\n\t\t// Add handles to the slider base.\n\t\tfunction addElements(connectOptions, base) {\n\n\t\t\tscope_Handles = [];\n\t\t\tscope_Connects = [];\n\n\t\t\tscope_Connects.push(addConnect(base, connectOptions[0]));\n\n\t\t\t// [::::O====O====O====]\n\t\t\t// connectOptions = [0, 1, 1, 1]\n\n\t\t\tfor (var i = 0; i < options.handles; i++) {\n\t\t\t\t// Keep a list of all added handles.\n\t\t\t\tscope_Handles.push(addOrigin(base, i));\n\t\t\t\tscope_HandleNumbers[i] = i;\n\t\t\t\tscope_Connects.push(addConnect(base, connectOptions[i + 1]));\n\t\t\t}\n\t\t}\n\n\t\t// Initialize a single slider.\n\t\tfunction addSlider(target) {\n\n\t\t\t// Apply classes and data to the target.\n\t\t\taddClass(target, options.cssClasses.target);\n\n\t\t\tif (options.dir === 0) {\n\t\t\t\taddClass(target, options.cssClasses.ltr);\n\t\t\t} else {\n\t\t\t\taddClass(target, options.cssClasses.rtl);\n\t\t\t}\n\n\t\t\tif (options.ort === 0) {\n\t\t\t\taddClass(target, options.cssClasses.horizontal);\n\t\t\t} else {\n\t\t\t\taddClass(target, options.cssClasses.vertical);\n\t\t\t}\n\n\t\t\tscope_Base = addNodeTo(target, options.cssClasses.base);\n\t\t}\n\n\t\tfunction addTooltip(handle, handleNumber) {\n\n\t\t\tif (!options.tooltips[handleNumber]) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn addNodeTo(handle.firstChild, options.cssClasses.tooltip);\n\t\t}\n\n\t\t// The tooltips option is a shorthand for using the 'update' event.\n\t\tfunction tooltips() {\n\n\t\t\t// Tooltips are added with options.tooltips in original order.\n\t\t\tvar tips = scope_Handles.map(addTooltip);\n\n\t\t\tbindEvent('update', function (values, handleNumber, unencoded) {\n\n\t\t\t\tif (!tips[handleNumber]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar formattedValue = values[handleNumber];\n\n\t\t\t\tif (options.tooltips[handleNumber] !== true) {\n\t\t\t\t\tformattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);\n\t\t\t\t}\n\n\t\t\t\ttips[handleNumber].innerHTML = formattedValue;\n\t\t\t});\n\t\t}\n\n\t\tfunction getGroup(mode, values, stepped) {\n\n\t\t\t// Use the range.\n\t\t\tif (mode === 'range' || mode === 'steps') {\n\t\t\t\treturn scope_Spectrum.xVal;\n\t\t\t}\n\n\t\t\tif (mode === 'count') {\n\n\t\t\t\tif (!values) {\n\t\t\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): 'values' required for mode 'count'.\");\n\t\t\t\t}\n\n\t\t\t\t// Divide 0 - 100 in 'count' parts.\n\t\t\t\tvar spread = 100 / (values - 1);\n\t\t\t\tvar v;\n\t\t\t\tvar i = 0;\n\n\t\t\t\tvalues = [];\n\n\t\t\t\t// List these parts and have them handled as 'positions'.\n\t\t\t\twhile ((v = i++ * spread) <= 100) {\n\t\t\t\t\tvalues.push(v);\n\t\t\t\t}\n\n\t\t\t\tmode = 'positions';\n\t\t\t}\n\n\t\t\tif (mode === 'positions') {\n\n\t\t\t\t// Map all percentages to on-range values.\n\t\t\t\treturn values.map(function (value) {\n\t\t\t\t\treturn scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (mode === 'values') {\n\n\t\t\t\t// If the value must be stepped, it needs to be converted to a percentage first.\n\t\t\t\tif (stepped) {\n\n\t\t\t\t\treturn values.map(function (value) {\n\n\t\t\t\t\t\t// Convert to percentage, apply step, return to value.\n\t\t\t\t\t\treturn scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Otherwise, we can simply use the values.\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\n\t\tfunction generateSpread(density, mode, group) {\n\n\t\t\tfunction safeIncrement(value, increment) {\n\t\t\t\t// Avoid floating point variance by dropping the smallest decimal places.\n\t\t\t\treturn (value + increment).toFixed(7) / 1;\n\t\t\t}\n\n\t\t\tvar indexes = {};\n\t\t\tvar firstInRange = scope_Spectrum.xVal[0];\n\t\t\tvar lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];\n\t\t\tvar ignoreFirst = false;\n\t\t\tvar ignoreLast = false;\n\t\t\tvar prevPct = 0;\n\n\t\t\t// Create a copy of the group, sort it and filter away all duplicates.\n\t\t\tgroup = unique(group.slice().sort(function (a, b) {\n\t\t\t\treturn a - b;\n\t\t\t}));\n\n\t\t\t// Make sure the range starts with the first element.\n\t\t\tif (group[0] !== firstInRange) {\n\t\t\t\tgroup.unshift(firstInRange);\n\t\t\t\tignoreFirst = true;\n\t\t\t}\n\n\t\t\t// Likewise for the last one.\n\t\t\tif (group[group.length - 1] !== lastInRange) {\n\t\t\t\tgroup.push(lastInRange);\n\t\t\t\tignoreLast = true;\n\t\t\t}\n\n\t\t\tgroup.forEach(function (current, index) {\n\n\t\t\t\t// Get the current step and the lower + upper positions.\n\t\t\t\tvar step;\n\t\t\t\tvar i;\n\t\t\t\tvar q;\n\t\t\t\tvar low = current;\n\t\t\t\tvar high = group[index + 1];\n\t\t\t\tvar newPct;\n\t\t\t\tvar pctDifference;\n\t\t\t\tvar pctPos;\n\t\t\t\tvar type;\n\t\t\t\tvar steps;\n\t\t\t\tvar realSteps;\n\t\t\t\tvar stepsize;\n\n\t\t\t\t// When using 'steps' mode, use the provided steps.\n\t\t\t\t// Otherwise, we'll step on to the next subrange.\n\t\t\t\tif (mode === 'steps') {\n\t\t\t\t\tstep = scope_Spectrum.xNumSteps[index];\n\t\t\t\t}\n\n\t\t\t\t// Default to a 'full' step.\n\t\t\t\tif (!step) {\n\t\t\t\t\tstep = high - low;\n\t\t\t\t}\n\n\t\t\t\t// Low can be 0, so test for false. If high is undefined,\n\t\t\t\t// we are at the last subrange. Index 0 is already handled.\n\t\t\t\tif (low === false || high === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Make sure step isn't 0, which would cause an infinite loop (#654)\n\t\t\t\tstep = Math.max(step, 0.0000001);\n\n\t\t\t\t// Find all steps in the subrange.\n\t\t\t\tfor (i = low; i <= high; i = safeIncrement(i, step)) {\n\n\t\t\t\t\t// Get the percentage value for the current step,\n\t\t\t\t\t// calculate the size for the subrange.\n\t\t\t\t\tnewPct = scope_Spectrum.toStepping(i);\n\t\t\t\t\tpctDifference = newPct - prevPct;\n\n\t\t\t\t\tsteps = pctDifference / density;\n\t\t\t\t\trealSteps = Math.round(steps);\n\n\t\t\t\t\t// This ratio represents the ammount of percentage-space a point indicates.\n\t\t\t\t\t// For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-devided.\n\t\t\t\t\t// Round the percentage offset to an even number, then divide by two\n\t\t\t\t\t// to spread the offset on both sides of the range.\n\t\t\t\t\tstepsize = pctDifference / realSteps;\n\n\t\t\t\t\t// Divide all points evenly, adding the correct number to this subrange.\n\t\t\t\t\t// Run up to <= so that 100% gets a point, event if ignoreLast is set.\n\t\t\t\t\tfor (q = 1; q <= realSteps; q += 1) {\n\n\t\t\t\t\t\t// The ratio between the rounded value and the actual size might be ~1% off.\n\t\t\t\t\t\t// Correct the percentage offset by the number of points\n\t\t\t\t\t\t// per subrange. density = 1 will result in 100 points on the\n\t\t\t\t\t\t// full range, 2 for 50, 4 for 25, etc.\n\t\t\t\t\t\tpctPos = prevPct + q * stepsize;\n\t\t\t\t\t\tindexes[pctPos.toFixed(5)] = ['x', 0];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Determine the point type.\n\t\t\t\t\ttype = group.indexOf(i) > -1 ? 1 : mode === 'steps' ? 2 : 0;\n\n\t\t\t\t\t// Enforce the 'ignoreFirst' option by overwriting the type for 0.\n\t\t\t\t\tif (!index && ignoreFirst) {\n\t\t\t\t\t\ttype = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(i === high && ignoreLast)) {\n\t\t\t\t\t\t// Mark the 'type' of this point. 0 = plain, 1 = real value, 2 = step value.\n\t\t\t\t\t\tindexes[newPct.toFixed(5)] = [i, type];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update the percentage count.\n\t\t\t\t\tprevPct = newPct;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn indexes;\n\t\t}\n\n\t\tfunction addMarking(spread, filterFunc, formatter) {\n\n\t\t\tvar element = document.createElement('div');\n\t\t\tvar out = '';\n\t\t\tvar valueSizeClasses = [options.cssClasses.valueNormal, options.cssClasses.valueLarge, options.cssClasses.valueSub];\n\t\t\tvar markerSizeClasses = [options.cssClasses.markerNormal, options.cssClasses.markerLarge, options.cssClasses.markerSub];\n\t\t\tvar valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];\n\t\t\tvar markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];\n\n\t\t\taddClass(element, options.cssClasses.pips);\n\t\t\taddClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);\n\n\t\t\tfunction getClasses(type, source) {\n\t\t\t\tvar a = source === options.cssClasses.value;\n\t\t\t\tvar orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;\n\t\t\t\tvar sizeClasses = a ? valueSizeClasses : markerSizeClasses;\n\n\t\t\t\treturn source + ' ' + orientationClasses[options.ort] + ' ' + sizeClasses[type];\n\t\t\t}\n\n\t\t\tfunction getTags(offset, source, values) {\n\t\t\t\treturn 'class=\"' + getClasses(values[1], source) + '\" style=\"' + options.style + ': ' + offset + '%\"';\n\t\t\t}\n\n\t\t\tfunction addSpread(offset, values) {\n\n\t\t\t\t// Apply the filter function, if it is set.\n\t\t\t\tvalues[1] = values[1] && filterFunc ? filterFunc(values[0], values[1]) : values[1];\n\n\t\t\t\t// Add a marker for every point\n\t\t\t\tout += '<div ' + getTags(offset, options.cssClasses.marker, values) + '></div>';\n\n\t\t\t\t// Values are only appended for points marked '1' or '2'.\n\t\t\t\tif (values[1]) {\n\t\t\t\t\tout += '<div ' + getTags(offset, options.cssClasses.value, values) + '>' + formatter.to(values[0]) + '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Append all points.\n\t\t\tObject.keys(spread).forEach(function (a) {\n\t\t\t\taddSpread(a, spread[a]);\n\t\t\t});\n\n\t\t\telement.innerHTML = out;\n\n\t\t\treturn element;\n\t\t}\n\n\t\tfunction pips(grid) {\n\n\t\t\tvar mode = grid.mode;\n\t\t\tvar density = grid.density || 1;\n\t\t\tvar filter = grid.filter || false;\n\t\t\tvar values = grid.values || false;\n\t\t\tvar stepped = grid.stepped || false;\n\t\t\tvar group = getGroup(mode, values, stepped);\n\t\t\tvar spread = generateSpread(density, mode, group);\n\t\t\tvar format = grid.format || {\n\t\t\t\tto: Math.round\n\t\t\t};\n\n\t\t\treturn scope_Target.appendChild(addMarking(spread, filter, format));\n\t\t}\n\n\t\t// Shorthand for base dimensions.\n\t\tfunction baseSize() {\n\t\t\tvar rect = scope_Base.getBoundingClientRect(),\n\t\t\t    alt = 'offset' + ['Width', 'Height'][options.ort];\n\t\t\treturn options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];\n\t\t}\n\n\t\t// Handler for attaching events trough a proxy.\n\t\tfunction attachEvent(events, element, callback, data) {\n\n\t\t\t// This function can be used to 'filter' events to the slider.\n\t\t\t// element is a node, not a nodeList\n\n\t\t\tvar method = function method(e) {\n\n\t\t\t\tif (scope_Target.hasAttribute('disabled')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Stop if an active 'tap' transition is taking place.\n\t\t\t\tif (hasClass(scope_Target, options.cssClasses.tap)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\te = fixEvent(e, data.pageOffset);\n\n\t\t\t\t// Handle reject of multitouch\n\t\t\t\tif (!e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore right or middle clicks on start #454\n\t\t\t\tif (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Ignore right or middle clicks on start #454\n\t\t\t\tif (data.hover && e.buttons) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\te.calcPoint = e.points[options.ort];\n\n\t\t\t\t// Call the event handler with the event [ and additional data ].\n\t\t\t\tcallback(e, data);\n\t\t\t};\n\n\t\t\tvar methods = [];\n\n\t\t\t// Bind a closure on the target for every event type.\n\t\t\tevents.split(' ').forEach(function (eventName) {\n\t\t\t\telement.addEventListener(eventName, method, false);\n\t\t\t\tmethods.push([eventName, method]);\n\t\t\t});\n\n\t\t\treturn methods;\n\t\t}\n\n\t\t// Provide a clean event with standardized offset values.\n\t\tfunction fixEvent(e, pageOffset) {\n\n\t\t\t// Prevent scrolling and panning on touch events, while\n\t\t\t// attempting to slide. The tap event also depends on this.\n\t\t\te.preventDefault();\n\n\t\t\t// Filter the event to register the type, which can be\n\t\t\t// touch, mouse or pointer. Offset changes need to be\n\t\t\t// made on an event specific basis.\n\t\t\tvar touch = e.type.indexOf('touch') === 0;\n\t\t\tvar mouse = e.type.indexOf('mouse') === 0;\n\t\t\tvar pointer = e.type.indexOf('pointer') === 0;\n\t\t\tvar x;\n\t\t\tvar y;\n\n\t\t\t// IE10 implemented pointer events with a prefix;\n\t\t\tif (e.type.indexOf('MSPointer') === 0) {\n\t\t\t\tpointer = true;\n\t\t\t}\n\n\t\t\tif (touch) {\n\n\t\t\t\t// Fix bug when user touches with two or more fingers on mobile devices.\n\t\t\t\t// It's useful when you have two or more sliders on one page,\n\t\t\t\t// that can be touched simultaneously.\n\t\t\t\t// #649, #663, #668\n\t\t\t\tif (e.touches.length > 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// noUiSlider supports one movement at a time,\n\t\t\t\t// so we can select the first 'changedTouch'.\n\t\t\t\tx = e.changedTouches[0].pageX;\n\t\t\t\ty = e.changedTouches[0].pageY;\n\t\t\t}\n\n\t\t\tpageOffset = pageOffset || getPageOffset();\n\n\t\t\tif (mouse || pointer) {\n\t\t\t\tx = e.clientX + pageOffset.x;\n\t\t\t\ty = e.clientY + pageOffset.y;\n\t\t\t}\n\n\t\t\te.pageOffset = pageOffset;\n\t\t\te.points = [x, y];\n\t\t\te.cursor = mouse || pointer; // Fix #435\n\n\t\t\treturn e;\n\t\t}\n\n\t\t// Translate a coordinate in the document to a percentage on the slider\n\t\tfunction calcPointToPercentage(calcPoint) {\n\t\t\tvar location = calcPoint - offset(scope_Base, options.ort);\n\t\t\tvar proposal = location * 100 / baseSize();\n\t\t\treturn options.dir ? 100 - proposal : proposal;\n\t\t}\n\n\t\t// Find handle closest to a certain percentage on the slider\n\t\tfunction getClosestHandle(proposal) {\n\n\t\t\tvar closest = 100;\n\t\t\tvar handleNumber = false;\n\n\t\t\tscope_Handles.forEach(function (handle, index) {\n\n\t\t\t\t// Disabled handles are ignored\n\t\t\t\tif (handle.hasAttribute('disabled')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar pos = Math.abs(scope_Locations[index] - proposal);\n\n\t\t\t\tif (pos < closest) {\n\t\t\t\t\thandleNumber = index;\n\t\t\t\t\tclosest = pos;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn handleNumber;\n\t\t}\n\n\t\t// Moves handle(s) by a percentage\n\t\t// (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])\n\t\tfunction moveHandles(upward, proposal, locations, handleNumbers) {\n\n\t\t\tvar proposals = locations.slice();\n\n\t\t\tvar b = [!upward, upward];\n\t\t\tvar f = [upward, !upward];\n\n\t\t\t// Copy handleNumbers so we don't change the dataset\n\t\t\thandleNumbers = handleNumbers.slice();\n\n\t\t\t// Check to see which handle is 'leading'.\n\t\t\t// If that one can't move the second can't either.\n\t\t\tif (upward) {\n\t\t\t\thandleNumbers.reverse();\n\t\t\t}\n\n\t\t\t// Step 1: get the maximum percentage that any of the handles can move\n\t\t\tif (handleNumbers.length > 1) {\n\n\t\t\t\thandleNumbers.forEach(function (handleNumber, o) {\n\n\t\t\t\t\tvar to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o]);\n\n\t\t\t\t\t// Stop if one of the handles can't move.\n\t\t\t\t\tif (to === false) {\n\t\t\t\t\t\tproposal = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproposal = to - proposals[handleNumber];\n\t\t\t\t\t\tproposals[handleNumber] = to;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If using one handle, check backward AND forward\n\t\t\telse {\n\t\t\t\t\tb = f = [true];\n\t\t\t\t}\n\n\t\t\tvar state = false;\n\n\t\t\t// Step 2: Try to set the handles with the found percentage\n\t\t\thandleNumbers.forEach(function (handleNumber, o) {\n\t\t\t\tstate = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o]) || state;\n\t\t\t});\n\n\t\t\t// Step 3: If a handle moved, fire events\n\t\t\tif (state) {\n\t\t\t\thandleNumbers.forEach(function (handleNumber) {\n\t\t\t\t\tfireEvent('update', handleNumber);\n\t\t\t\t\tfireEvent('slide', handleNumber);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// External event handling\n\t\tfunction fireEvent(eventName, handleNumber, tap) {\n\n\t\t\tObject.keys(scope_Events).forEach(function (targetEvent) {\n\n\t\t\t\tvar eventType = targetEvent.split('.')[0];\n\n\t\t\t\tif (eventName === eventType) {\n\t\t\t\t\tscope_Events[targetEvent].forEach(function (callback) {\n\n\t\t\t\t\t\tcallback.call(\n\t\t\t\t\t\t// Use the slider public API as the scope ('this')\n\t\t\t\t\t\tscope_Self,\n\t\t\t\t\t\t// Return values as array, so arg_1[arg_2] is always valid.\n\t\t\t\t\t\tscope_Values.map(options.format.to),\n\t\t\t\t\t\t// Handle index, 0 or 1\n\t\t\t\t\t\thandleNumber,\n\t\t\t\t\t\t// Unformatted slider values\n\t\t\t\t\t\tscope_Values.slice(),\n\t\t\t\t\t\t// Event is fired by tap, true or false\n\t\t\t\t\t\ttap || false,\n\t\t\t\t\t\t// Left offset of the handle, in relation to the slider\n\t\t\t\t\t\tscope_Locations.slice());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Fire 'end' when a mouse or pen leaves the document.\n\t\tfunction documentLeave(event, data) {\n\t\t\tif (event.type === \"mouseout\" && event.target.nodeName === \"HTML\" && event.relatedTarget === null) {\n\t\t\t\teventEnd(event, data);\n\t\t\t}\n\t\t}\n\n\t\t// Handle movement on document for handle and range drag.\n\t\tfunction eventMove(event, data) {\n\n\t\t\t// Fix #498\n\t\t\t// Check value of .buttons in 'start' to work around a bug in IE10 mobile (data.buttonsProperty).\n\t\t\t// https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero\n\t\t\t// IE9 has .buttons and .which zero on mousemove.\n\t\t\t// Firefox breaks the spec MDN defines.\n\t\t\tif (navigator.appVersion.indexOf(\"MSIE 9\") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {\n\t\t\t\treturn eventEnd(event, data);\n\t\t\t}\n\n\t\t\t// Check if we are moving up or down\n\t\t\tvar movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);\n\n\t\t\t// Convert the movement into a percentage of the slider width/height\n\t\t\tvar proposal = movement * 100 / data.baseSize;\n\n\t\t\tmoveHandles(movement > 0, proposal, data.locations, data.handleNumbers);\n\t\t}\n\n\t\t// Unbind move events on document, call callbacks.\n\t\tfunction eventEnd(event, data) {\n\n\t\t\t// The handle is no longer active, so remove the class.\n\t\t\tif (scope_ActiveHandle) {\n\t\t\t\tremoveClass(scope_ActiveHandle, options.cssClasses.active);\n\t\t\t\tscope_ActiveHandle = false;\n\t\t\t}\n\n\t\t\t// Remove cursor styles and text-selection events bound to the body.\n\t\t\tif (event.cursor) {\n\t\t\t\tdocument.body.style.cursor = '';\n\t\t\t\tdocument.body.removeEventListener('selectstart', document.body.noUiListener);\n\t\t\t}\n\n\t\t\t// Unbind the move and end events, which are added on 'start'.\n\t\t\tdocument.documentElement.noUiListeners.forEach(function (c) {\n\t\t\t\tdocument.documentElement.removeEventListener(c[0], c[1]);\n\t\t\t});\n\n\t\t\t// Remove dragging class.\n\t\t\tremoveClass(scope_Target, options.cssClasses.drag);\n\n\t\t\tsetZindex();\n\n\t\t\tdata.handleNumbers.forEach(function (handleNumber) {\n\t\t\t\tfireEvent('set', handleNumber);\n\t\t\t\tfireEvent('change', handleNumber);\n\t\t\t\tfireEvent('end', handleNumber);\n\t\t\t});\n\t\t}\n\n\t\t// Bind move events on document.\n\t\tfunction eventStart(event, data) {\n\n\t\t\tif (data.handleNumbers.length === 1) {\n\n\t\t\t\tvar handle = scope_Handles[data.handleNumbers[0]];\n\n\t\t\t\t// Ignore 'disabled' handles\n\t\t\t\tif (handle.hasAttribute('disabled')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Mark the handle as 'active' so it can be styled.\n\t\t\t\tscope_ActiveHandle = handle.children[0];\n\t\t\t\taddClass(scope_ActiveHandle, options.cssClasses.active);\n\t\t\t}\n\n\t\t\t// Fix #551, where a handle gets selected instead of dragged.\n\t\t\tevent.preventDefault();\n\n\t\t\t// A drag should never propagate up to the 'tap' event.\n\t\t\tevent.stopPropagation();\n\n\t\t\t// Attach the move and end events.\n\t\t\tvar moveEvent = attachEvent(actions.move, document.documentElement, eventMove, {\n\t\t\t\tstartCalcPoint: event.calcPoint,\n\t\t\t\tbaseSize: baseSize(),\n\t\t\t\tpageOffset: event.pageOffset,\n\t\t\t\thandleNumbers: data.handleNumbers,\n\t\t\t\tbuttonsProperty: event.buttons,\n\t\t\t\tlocations: scope_Locations.slice()\n\t\t\t});\n\n\t\t\tvar endEvent = attachEvent(actions.end, document.documentElement, eventEnd, {\n\t\t\t\thandleNumbers: data.handleNumbers\n\t\t\t});\n\n\t\t\tvar outEvent = attachEvent(\"mouseout\", document.documentElement, documentLeave, {\n\t\t\t\thandleNumbers: data.handleNumbers\n\t\t\t});\n\n\t\t\tdocument.documentElement.noUiListeners = moveEvent.concat(endEvent, outEvent);\n\n\t\t\t// Text selection isn't an issue on touch devices,\n\t\t\t// so adding cursor styles can be skipped.\n\t\t\tif (event.cursor) {\n\n\t\t\t\t// Prevent the 'I' cursor and extend the range-drag cursor.\n\t\t\t\tdocument.body.style.cursor = getComputedStyle(event.target).cursor;\n\n\t\t\t\t// Mark the target with a dragging state.\n\t\t\t\tif (scope_Handles.length > 1) {\n\t\t\t\t\taddClass(scope_Target, options.cssClasses.drag);\n\t\t\t\t}\n\n\t\t\t\tvar f = function f() {\n\t\t\t\t\treturn false;\n\t\t\t\t};\n\n\t\t\t\tdocument.body.noUiListener = f;\n\n\t\t\t\t// Prevent text selection when dragging the handles.\n\t\t\t\tdocument.body.addEventListener('selectstart', f, false);\n\t\t\t}\n\n\t\t\tdata.handleNumbers.forEach(function (handleNumber) {\n\t\t\t\tfireEvent('start', handleNumber);\n\t\t\t});\n\t\t}\n\n\t\t// Move closest handle to tapped location.\n\t\tfunction eventTap(event) {\n\n\t\t\t// The tap event shouldn't propagate up\n\t\t\tevent.stopPropagation();\n\n\t\t\tvar proposal = calcPointToPercentage(event.calcPoint);\n\t\t\tvar handleNumber = getClosestHandle(proposal);\n\n\t\t\t// Tackle the case that all handles are 'disabled'.\n\t\t\tif (handleNumber === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Flag the slider as it is now in a transitional state.\n\t\t\t// Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.\n\t\t\tif (!options.events.snap) {\n\t\t\t\taddClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n\t\t\t}\n\n\t\t\tsetHandle(handleNumber, proposal, true, true);\n\n\t\t\tsetZindex();\n\n\t\t\tfireEvent('slide', handleNumber, true);\n\t\t\tfireEvent('set', handleNumber, true);\n\t\t\tfireEvent('change', handleNumber, true);\n\t\t\tfireEvent('update', handleNumber, true);\n\n\t\t\tif (options.events.snap) {\n\t\t\t\teventStart(event, { handleNumbers: [handleNumber] });\n\t\t\t}\n\t\t}\n\n\t\t// Fires a 'hover' event for a hovered mouse/pen position.\n\t\tfunction eventHover(event) {\n\n\t\t\tvar proposal = calcPointToPercentage(event.calcPoint);\n\n\t\t\tvar to = scope_Spectrum.getStep(proposal);\n\t\t\tvar value = scope_Spectrum.fromStepping(to);\n\n\t\t\tObject.keys(scope_Events).forEach(function (targetEvent) {\n\t\t\t\tif ('hover' === targetEvent.split('.')[0]) {\n\t\t\t\t\tscope_Events[targetEvent].forEach(function (callback) {\n\t\t\t\t\t\tcallback.call(scope_Self, value);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Attach events to several slider parts.\n\t\tfunction bindSliderEvents(behaviour) {\n\n\t\t\t// Attach the standard drag event to the handles.\n\t\t\tif (!behaviour.fixed) {\n\n\t\t\t\tscope_Handles.forEach(function (handle, index) {\n\n\t\t\t\t\t// These events are only bound to the visual handle\n\t\t\t\t\t// element, not the 'real' origin element.\n\t\t\t\t\tattachEvent(actions.start, handle.children[0], eventStart, {\n\t\t\t\t\t\thandleNumbers: [index]\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Attach the tap event to the slider base.\n\t\t\tif (behaviour.tap) {\n\t\t\t\tattachEvent(actions.start, scope_Base, eventTap, {});\n\t\t\t}\n\n\t\t\t// Fire hover events\n\t\t\tif (behaviour.hover) {\n\t\t\t\tattachEvent(actions.move, scope_Base, eventHover, { hover: true });\n\t\t\t}\n\n\t\t\t// Make the range draggable.\n\t\t\tif (behaviour.drag) {\n\n\t\t\t\tscope_Connects.forEach(function (connect, index) {\n\n\t\t\t\t\tif (connect === false || index === 0 || index === scope_Connects.length - 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar handleBefore = scope_Handles[index - 1];\n\t\t\t\t\tvar handleAfter = scope_Handles[index];\n\t\t\t\t\tvar eventHolders = [connect];\n\n\t\t\t\t\taddClass(connect, options.cssClasses.draggable);\n\n\t\t\t\t\t// When the range is fixed, the entire range can\n\t\t\t\t\t// be dragged by the handles. The handle in the first\n\t\t\t\t\t// origin will propagate the start event upward,\n\t\t\t\t\t// but it needs to be bound manually on the other.\n\t\t\t\t\tif (behaviour.fixed) {\n\t\t\t\t\t\teventHolders.push(handleBefore.children[0]);\n\t\t\t\t\t\teventHolders.push(handleAfter.children[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\teventHolders.forEach(function (eventHolder) {\n\t\t\t\t\t\tattachEvent(actions.start, eventHolder, eventStart, {\n\t\t\t\t\t\t\thandles: [handleBefore, handleAfter],\n\t\t\t\t\t\t\thandleNumbers: [index - 1, index]\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Split out the handle positioning logic so the Move event can use it, too\n\t\tfunction checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward) {\n\n\t\t\t// For sliders with multiple handles, limit movement to the other handle.\n\t\t\t// Apply the margin option by adding it to the handle positions.\n\t\t\tif (scope_Handles.length > 1) {\n\n\t\t\t\tif (lookBackward && handleNumber > 0) {\n\t\t\t\t\tto = Math.max(to, reference[handleNumber - 1] + options.margin);\n\t\t\t\t}\n\n\t\t\t\tif (lookForward && handleNumber < scope_Handles.length - 1) {\n\t\t\t\t\tto = Math.min(to, reference[handleNumber + 1] - options.margin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The limit option has the opposite effect, limiting handles to a\n\t\t\t// maximum distance from another. Limit must be > 0, as otherwise\n\t\t\t// handles would be unmoveable.\n\t\t\tif (scope_Handles.length > 1 && options.limit) {\n\n\t\t\t\tif (lookBackward && handleNumber > 0) {\n\t\t\t\t\tto = Math.min(to, reference[handleNumber - 1] + options.limit);\n\t\t\t\t}\n\n\t\t\t\tif (lookForward && handleNumber < scope_Handles.length - 1) {\n\t\t\t\t\tto = Math.max(to, reference[handleNumber + 1] - options.limit);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The padding option keeps the handles a certain distance from the\n\t\t\t// edges of the slider. Padding must be > 0.\n\t\t\tif (options.padding) {\n\n\t\t\t\tif (handleNumber === 0) {\n\t\t\t\t\tto = Math.max(to, options.padding);\n\t\t\t\t}\n\n\t\t\t\tif (handleNumber === scope_Handles.length - 1) {\n\t\t\t\t\tto = Math.min(to, 100 - options.padding);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tto = scope_Spectrum.getStep(to);\n\n\t\t\t// Limit percentage to the 0 - 100 range\n\t\t\tto = limit(to);\n\n\t\t\t// Return false if handle can't move\n\t\t\tif (to === reference[handleNumber]) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn to;\n\t\t}\n\n\t\tfunction toPct(pct) {\n\t\t\treturn pct + '%';\n\t\t}\n\n\t\t// Updates scope_Locations and scope_Values, updates visual state\n\t\tfunction updateHandlePosition(handleNumber, to) {\n\n\t\t\t// Update locations.\n\t\t\tscope_Locations[handleNumber] = to;\n\n\t\t\t// Convert the value to the slider stepping/range.\n\t\t\tscope_Values[handleNumber] = scope_Spectrum.fromStepping(to);\n\n\t\t\t// Called synchronously or on the next animationFrame\n\t\t\tvar stateUpdate = function stateUpdate() {\n\t\t\t\tscope_Handles[handleNumber].style[options.style] = toPct(to);\n\t\t\t\tupdateConnect(handleNumber);\n\t\t\t\tupdateConnect(handleNumber + 1);\n\t\t\t};\n\n\t\t\t// Set the handle to the new position.\n\t\t\t// Use requestAnimationFrame for efficient painting.\n\t\t\t// No significant effect in Chrome, Edge sees dramatic performace improvements.\n\t\t\t// Option to disable is useful for unit tests, and single-step debugging.\n\t\t\tif (window.requestAnimationFrame && options.useRequestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(stateUpdate);\n\t\t\t} else {\n\t\t\t\tstateUpdate();\n\t\t\t}\n\t\t}\n\n\t\tfunction setZindex() {\n\n\t\t\tscope_HandleNumbers.forEach(function (handleNumber) {\n\t\t\t\t// Handles before the slider middle are stacked later = higher,\n\t\t\t\t// Handles after the middle later is lower\n\t\t\t\t// [[7] [8] .......... | .......... [5] [4]\n\t\t\t\tvar dir = scope_Locations[handleNumber] > 50 ? -1 : 1;\n\t\t\t\tvar zIndex = 3 + (scope_Handles.length + dir * handleNumber);\n\t\t\t\tscope_Handles[handleNumber].childNodes[0].style.zIndex = zIndex;\n\t\t\t});\n\t\t}\n\n\t\t// Test suggested values and apply margin, step.\n\t\tfunction setHandle(handleNumber, to, lookBackward, lookForward) {\n\n\t\t\tto = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward);\n\n\t\t\tif (to === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tupdateHandlePosition(handleNumber, to);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Updates style attribute for connect nodes\n\t\tfunction updateConnect(index) {\n\n\t\t\t// Skip connects set to false\n\t\t\tif (!scope_Connects[index]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar l = 0;\n\t\t\tvar h = 100;\n\n\t\t\tif (index !== 0) {\n\t\t\t\tl = scope_Locations[index - 1];\n\t\t\t}\n\n\t\t\tif (index !== scope_Connects.length - 1) {\n\t\t\t\th = scope_Locations[index];\n\t\t\t}\n\n\t\t\tscope_Connects[index].style[options.style] = toPct(l);\n\t\t\tscope_Connects[index].style[options.styleOposite] = toPct(100 - h);\n\t\t}\n\n\t\t// ...\n\t\tfunction setValue(to, handleNumber) {\n\n\t\t\t// Setting with null indicates an 'ignore'.\n\t\t\t// Inputting 'false' is invalid.\n\t\t\tif (to === null || to === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a formatted number was passed, attemt to decode it.\n\t\t\tif (typeof to === 'number') {\n\t\t\t\tto = String(to);\n\t\t\t}\n\n\t\t\tto = options.format.from(to);\n\n\t\t\t// Request an update for all links if the value was invalid.\n\t\t\t// Do so too if setting the handle fails.\n\t\t\tif (to !== false && !isNaN(to)) {\n\t\t\t\tsetHandle(handleNumber, scope_Spectrum.toStepping(to), false, false);\n\t\t\t}\n\t\t}\n\n\t\t// Set the slider value.\n\t\tfunction valueSet(input, fireSetEvent) {\n\n\t\t\tvar values = asArray(input);\n\t\t\tvar isInit = scope_Locations[0] === undefined;\n\n\t\t\t// Event fires by default\n\t\t\tfireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent;\n\n\t\t\tvalues.forEach(setValue);\n\n\t\t\t// Animation is optional.\n\t\t\t// Make sure the initial values were set before using animated placement.\n\t\t\tif (options.animate && !isInit) {\n\t\t\t\taddClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n\t\t\t}\n\n\t\t\t// Now that all base values are set, apply constraints\n\t\t\tscope_HandleNumbers.forEach(function (handleNumber) {\n\t\t\t\tsetHandle(handleNumber, scope_Locations[handleNumber], true, false);\n\t\t\t});\n\n\t\t\tsetZindex();\n\n\t\t\tscope_HandleNumbers.forEach(function (handleNumber) {\n\n\t\t\t\tfireEvent('update', handleNumber);\n\n\t\t\t\t// Fire the event only for handles that received a new value, as per #579\n\t\t\t\tif (values[handleNumber] !== null && fireSetEvent) {\n\t\t\t\t\tfireEvent('set', handleNumber);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Reset slider to initial values\n\t\tfunction valueReset(fireSetEvent) {\n\t\t\tvalueSet(options.start, fireSetEvent);\n\t\t}\n\n\t\t// Get the slider value.\n\t\tfunction valueGet() {\n\n\t\t\tvar values = scope_Values.map(options.format.to);\n\n\t\t\t// If only one handle is used, return a single value.\n\t\t\tif (values.length === 1) {\n\t\t\t\treturn values[0];\n\t\t\t}\n\n\t\t\treturn values;\n\t\t}\n\n\t\t// Removes classes from the root and empties it.\n\t\tfunction destroy() {\n\n\t\t\tfor (var key in options.cssClasses) {\n\t\t\t\tif (!options.cssClasses.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tremoveClass(scope_Target, options.cssClasses[key]);\n\t\t\t}\n\n\t\t\twhile (scope_Target.firstChild) {\n\t\t\t\tscope_Target.removeChild(scope_Target.firstChild);\n\t\t\t}\n\n\t\t\tdelete scope_Target.noUiSlider;\n\t\t}\n\n\t\t// Get the current step size for the slider.\n\t\tfunction getCurrentStep() {\n\n\t\t\t// Check all locations, map them to their stepping point.\n\t\t\t// Get the step point, then find it in the input list.\n\t\t\treturn scope_Locations.map(function (location, index) {\n\n\t\t\t\tvar nearbySteps = scope_Spectrum.getNearbySteps(location);\n\t\t\t\tvar value = scope_Values[index];\n\t\t\t\tvar increment = nearbySteps.thisStep.step;\n\t\t\t\tvar decrement = null;\n\n\t\t\t\t// If the next value in this step moves into the next step,\n\t\t\t\t// the increment is the start of the next step - the current value\n\t\t\t\tif (increment !== false) {\n\t\t\t\t\tif (value + increment > nearbySteps.stepAfter.startValue) {\n\t\t\t\t\t\tincrement = nearbySteps.stepAfter.startValue - value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If the value is beyond the starting point\n\t\t\t\tif (value > nearbySteps.thisStep.startValue) {\n\t\t\t\t\tdecrement = nearbySteps.thisStep.step;\n\t\t\t\t} else if (nearbySteps.stepBefore.step === false) {\n\t\t\t\t\tdecrement = false;\n\t\t\t\t}\n\n\t\t\t\t// If a handle is at the start of a step, it always steps back into the previous step first\n\t\t\t\telse {\n\t\t\t\t\t\tdecrement = value - nearbySteps.stepBefore.highestStep;\n\t\t\t\t\t}\n\n\t\t\t\t// Now, if at the slider edges, there is not in/decrement\n\t\t\t\tif (location === 100) {\n\t\t\t\t\tincrement = null;\n\t\t\t\t} else if (location === 0) {\n\t\t\t\t\tdecrement = null;\n\t\t\t\t}\n\n\t\t\t\t// As per #391, the comparison for the decrement step can have some rounding issues.\n\t\t\t\tvar stepDecimals = scope_Spectrum.countStepDecimals();\n\n\t\t\t\t// Round per #391\n\t\t\t\tif (increment !== null && increment !== false) {\n\t\t\t\t\tincrement = Number(increment.toFixed(stepDecimals));\n\t\t\t\t}\n\n\t\t\t\tif (decrement !== null && decrement !== false) {\n\t\t\t\t\tdecrement = Number(decrement.toFixed(stepDecimals));\n\t\t\t\t}\n\n\t\t\t\treturn [decrement, increment];\n\t\t\t});\n\t\t}\n\n\t\t// Attach an event to this slider, possibly including a namespace\n\t\tfunction bindEvent(namespacedEvent, callback) {\n\t\t\tscope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\n\t\t\tscope_Events[namespacedEvent].push(callback);\n\n\t\t\t// If the event bound is 'update,' fire it immediately for all handles.\n\t\t\tif (namespacedEvent.split('.')[0] === 'update') {\n\t\t\t\tscope_Handles.forEach(function (a, index) {\n\t\t\t\t\tfireEvent('update', index);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Undo attachment of event\n\t\tfunction removeEvent(namespacedEvent) {\n\n\t\t\tvar event = namespacedEvent && namespacedEvent.split('.')[0];\n\t\t\tvar namespace = event && namespacedEvent.substring(event.length);\n\n\t\t\tObject.keys(scope_Events).forEach(function (bind) {\n\n\t\t\t\tvar tEvent = bind.split('.')[0],\n\t\t\t\t    tNamespace = bind.substring(tEvent.length);\n\n\t\t\t\tif ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\n\t\t\t\t\tdelete scope_Events[bind];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Updateable: margin, limit, padding, step, range, animate, snap\n\t\tfunction updateOptions(optionsToUpdate, fireSetEvent) {\n\n\t\t\t// Spectrum is created using the range, snap, direction and step options.\n\t\t\t// 'snap' and 'step' can be updated, 'direction' cannot, due to event binding.\n\t\t\t// If 'snap' and 'step' are not passed, they should remain unchanged.\n\t\t\tvar v = valueGet();\n\n\t\t\tvar updateAble = ['margin', 'limit', 'padding', 'range', 'animate', 'snap', 'step', 'format'];\n\n\t\t\t// Only change options that we're actually passed to update.\n\t\t\tupdateAble.forEach(function (name) {\n\t\t\t\tif (optionsToUpdate[name] !== undefined) {\n\t\t\t\t\toriginalOptions[name] = optionsToUpdate[name];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar newOptions = testOptions(originalOptions);\n\n\t\t\t// Load new options into the slider state\n\t\t\tupdateAble.forEach(function (name) {\n\t\t\t\tif (optionsToUpdate[name] !== undefined) {\n\t\t\t\t\toptions[name] = newOptions[name];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Save current spectrum direction as testOptions in testRange call\n\t\t\t// doesn't rely on current direction\n\t\t\tnewOptions.spectrum.direction = scope_Spectrum.direction;\n\t\t\tscope_Spectrum = newOptions.spectrum;\n\n\t\t\t// Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)\n\t\t\toptions.margin = newOptions.margin;\n\t\t\toptions.limit = newOptions.limit;\n\t\t\toptions.padding = newOptions.padding;\n\n\t\t\t// Invalidate the current positioning so valueSet forces an update.\n\t\t\tscope_Locations = [];\n\t\t\tvalueSet(optionsToUpdate.start || v, fireSetEvent);\n\t\t}\n\n\t\t// Throw an error if the slider was already initialized.\n\t\tif (scope_Target.noUiSlider) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): Slider was already initialized.\");\n\t\t}\n\n\t\t// Create the base element, initialise HTML and set classes.\n\t\t// Add handles and connect elements.\n\t\taddSlider(scope_Target);\n\t\taddElements(options.connect, scope_Base);\n\n\t\tscope_Self = {\n\t\t\tdestroy: destroy,\n\t\t\tsteps: getCurrentStep,\n\t\t\ton: bindEvent,\n\t\t\toff: removeEvent,\n\t\t\tget: valueGet,\n\t\t\tset: valueSet,\n\t\t\treset: valueReset,\n\t\t\t// Exposed for unit testing, don't use this in your application.\n\t\t\t__moveHandles: function __moveHandles(a, b, c) {\n\t\t\t\tmoveHandles(a, b, scope_Locations, c);\n\t\t\t},\n\t\t\toptions: originalOptions, // Issue #600, #678\n\t\t\tupdateOptions: updateOptions,\n\t\t\ttarget: scope_Target, // Issue #597\n\t\t\tpips: pips // Issue #594\n\t\t};\n\n\t\t// Attach user events.\n\t\tbindSliderEvents(options.events);\n\n\t\t// Use the public value method to set the start values.\n\t\tvalueSet(options.start);\n\n\t\tif (options.pips) {\n\t\t\tpips(options.pips);\n\t\t}\n\n\t\tif (options.tooltips) {\n\t\t\ttooltips();\n\t\t}\n\n\t\treturn scope_Self;\n\t}\n\n\t// Run the standard initializer\n\tfunction initialize(target, originalOptions) {\n\n\t\tif (!target.nodeName) {\n\t\t\tthrow new Error(\"noUiSlider (\" + VERSION + \"): create requires a single element.\");\n\t\t}\n\n\t\t// Test the options and create the slider environment;\n\t\tvar options = testOptions(originalOptions, target);\n\t\tvar api = closure(target, options, originalOptions);\n\n\t\ttarget.noUiSlider = api;\n\n\t\treturn api;\n\t}\n\n\t// Use an object instead of a function for future expansibility;\n\treturn {\n\t\tversion: VERSION,\n\t\tcreate: initialize\n\t};\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n\nvar noUiSlider = __webpack_require__(3);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'nouislider',\n\n  props: {\n    config: {\n      type: Object,\n      required: true\n    },\n    values: {\n      type: Array,\n      required: true\n    },\n    id: {\n      type: String,\n      required: false\n    }\n  },\n\n  data: function data() {\n    return {\n      slider: null\n    };\n  },\n\n\n  methods: {\n    /**\n     * Update a slider handle value\n     * @param value\n     * @param handle\n     */\n    updateValue: function updateValue(value, handle) {\n      this.$set(this.values, handle, value[handle]);\n    },\n    /**\n     * Create a unique slider id\n     * @returns {string}\n     */\n    uniqueId: function uniqueId() {\n      function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return 'vue-nouislider-' + s4() + s4();\n    }\n  },\n\n  computed: {\n    /**\n     * Set the slider ID with prop value or random ID\n     * @returns {string}\n     */\n    sliderId: function sliderId() {\n      if (this.id === undefined) {\n        return this.uniqueId();\n      }\n\n      return this.id;\n    }\n  },\n\n  mounted: function mounted() {\n    var _this = this;\n\n    this.slider = document.getElementById(this.sliderId);\n\n    this.config.start = this.values;\n\n    noUiSlider.create(this.slider, this.config);\n\n    this.slider.noUiSlider.on('update', this.updateValue);\n\n    // Listen for Event on parent component if values are changed\n    this.$parent.$on('updateValue', function (value) {\n      _this.slider.noUiSlider.set(value);\n    });\n\n    // Fire Event if new value is set with the slider\n    this.slider.noUiSlider.on('change', function (newValues) {\n      _this.$parent.$emit('newValueSet', newValues);\n    });\n\n    this.slider.noUiSlider.on('start', function () {\n      _this.$parent.$off('updateValue');\n    });\n\n    this.slider.noUiSlider.on('end', function () {\n      _this.$parent.$on('updateValue', function (value) {\n        _this.slider.noUiSlider.set(value);\n      });\n    });\n  }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9VaVNsaWRlci52dWU/NmEzNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFRQTs7QUFFQTtRQUdBOzs7O1lBR0E7Z0JBRUE7QUFIQTs7WUFLQTtnQkFFQTtBQUhBOztZQUtBO2dCQUlBO0FBTEE7QUFUQTs7d0JBZUE7O2NBR0E7QUFGQTtBQUlBOzs7O0FBTUE7Ozs7O3FEQUNBOzJDQUNBO0FBQ0E7QUFJQTs7OztrQ0FDQTtvQkFDQTtnREFDQSxrQkFDQSxjQUNBO0FBQ0E7d0NBQ0E7QUFHQTtBQXRCQTs7O0FBMkJBOzs7O2tDQUNBO2lDQUNBO29CQUNBO0FBRUE7O2tCQUNBO0FBR0E7QUFiQTs7O0FBY0E7OytDQUVBOzs2QkFFQTs7d0NBRUE7OzZDQUVBOztBQUNBO3FEQUNBO2tDQUNBO0FBRUE7O0FBQ0E7NkRBQ0E7eUNBQ0E7QUFFQTs7bURBQ0E7eUJBQ0E7QUFFQTs7aURBQ0E7d0RBQ0E7b0NBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF6RkEiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8ZGl2IGNsYXNzPVwidnVlLW5vdWlzbGlkZXJcIiA6aWQ9XCJzbGlkZXJJZFwiPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIHZhciBub1VpU2xpZGVyID0gcmVxdWlyZSgnbm91aXNsaWRlcicpXG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdub3Vpc2xpZGVyJyxcblxuICAgIHByb3BzOiB7XG4gICAgICBjb25maWc6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB2YWx1ZXM6IHtcbiAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGlkOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuXG4gICAgZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzbGlkZXI6IG51bGwsXG4gICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgIC8qKlxuICAgICAgICogVXBkYXRlIGEgc2xpZGVyIGhhbmRsZSB2YWx1ZVxuICAgICAgICogQHBhcmFtIHZhbHVlXG4gICAgICAgKiBAcGFyYW0gaGFuZGxlXG4gICAgICAgKi9cbiAgICAgIHVwZGF0ZVZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGhhbmRsZSkge1xuICAgICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZXMsIGhhbmRsZSwgdmFsdWVbaGFuZGxlXSlcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIHVuaXF1ZSBzbGlkZXIgaWRcbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgIHVuaXF1ZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIHM0ICgpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC5zdWJzdHJpbmcoMSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3Z1ZS1ub3Vpc2xpZGVyLScgKyBzNCgpICsgczQoKVxuICAgICAgfSxcbiAgICB9LFxuXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0IHRoZSBzbGlkZXIgSUQgd2l0aCBwcm9wIHZhbHVlIG9yIHJhbmRvbSBJRFxuICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgc2xpZGVySWQgKCkge1xuICAgICAgICBpZiAodGhpcy5pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudW5pcXVlSWQoKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaWRcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIG1vdW50ZWQgKCkge1xuICAgICAgdGhpcy5zbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnNsaWRlcklkKVxuXG4gICAgICB0aGlzLmNvbmZpZy5zdGFydCA9IHRoaXMudmFsdWVzXG5cbiAgICAgIG5vVWlTbGlkZXIuY3JlYXRlKHRoaXMuc2xpZGVyLCB0aGlzLmNvbmZpZylcblxuICAgICAgdGhpcy5zbGlkZXIubm9VaVNsaWRlci5vbigndXBkYXRlJywgdGhpcy51cGRhdGVWYWx1ZSlcblxuICAgICAgLy8gTGlzdGVuIGZvciBFdmVudCBvbiBwYXJlbnQgY29tcG9uZW50IGlmIHZhbHVlcyBhcmUgY2hhbmdlZFxuICAgICAgdGhpcy4kcGFyZW50LiRvbigndXBkYXRlVmFsdWUnLCAodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5zbGlkZXIubm9VaVNsaWRlci5zZXQodmFsdWUpXG4gICAgICB9KVxuXG4gICAgICAvLyBGaXJlIEV2ZW50IGlmIG5ldyB2YWx1ZSBpcyBzZXQgd2l0aCB0aGUgc2xpZGVyXG4gICAgICB0aGlzLnNsaWRlci5ub1VpU2xpZGVyLm9uKCdjaGFuZ2UnLCAobmV3VmFsdWVzKSA9PiB7XG4gICAgICAgIHRoaXMuJHBhcmVudC4kZW1pdCgnbmV3VmFsdWVTZXQnLCBuZXdWYWx1ZXMpXG4gICAgICB9KVxuXG4gICAgICB0aGlzLnNsaWRlci5ub1VpU2xpZGVyLm9uKCdzdGFydCcsICgpID0+IHtcbiAgICAgICAgdGhpcy4kcGFyZW50LiRvZmYoJ3VwZGF0ZVZhbHVlJylcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuc2xpZGVyLm5vVWlTbGlkZXIub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy4kcGFyZW50LiRvbigndXBkYXRlVmFsdWUnLCAodmFsdWUpID0+IHtcbiAgICAgICAgICB0aGlzLnNsaWRlci5ub1VpU2xpZGVyLnNldCh2YWx1ZSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSxcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQgbGFuZz1cInNjc3NcIj5cbiAgQGltcG9ydCAnfm5vdWlzbGlkZXIvZGlzdHJpYnV0ZS9ub3Vpc2xpZGVyLm1pbi5jc3MnO1xuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBub1VpU2xpZGVyLnZ1ZT84OTljM2U5ZSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ub1VpU2xpZGVyLnZ1ZT8xY2YzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vbG9hZGVyLmpzP3tcIm9taXRcIjowLFwicmVtb3ZlXCI6dHJ1ZX0hLi9+L2Nzcy1sb2FkZXIhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtZTkxZDM2MDBcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9+L3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9ub1VpU2xpZGVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = Object.create(options.computed || null)\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n    options.computed = computed\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBzY29wZUlkLFxuICBjc3NNb2R1bGVzXG4pIHtcbiAgdmFyIGVzTW9kdWxlXG4gIHZhciBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgfHwge31cblxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXG4gIHZhciB0eXBlID0gdHlwZW9mIHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICBpZiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xuICAgIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgfVxuXG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAoY29tcGlsZWRUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gY29tcGlsZWRUZW1wbGF0ZS5yZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICAvLyBpbmplY3QgY3NzTW9kdWxlc1xuICBpZiAoY3NzTW9kdWxlcykge1xuICAgIHZhciBjb21wdXRlZCA9IE9iamVjdC5jcmVhdGUob3B0aW9ucy5jb21wdXRlZCB8fCBudWxsKVxuICAgIE9iamVjdC5rZXlzKGNzc01vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGNzc01vZHVsZXNba2V5XVxuICAgICAgY29tcHV0ZWRba2V5XSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1vZHVsZSB9XG4gICAgfSlcbiAgICBvcHRpb25zLmNvbXB1dGVkID0gY29tcHV0ZWRcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXNNb2R1bGU6IGVzTW9kdWxlLFxuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', [_c('div', {\n    staticClass: \"vue-nouislider\",\n    attrs: {\n      \"id\": _vm.sliderId\n    }\n  })])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-e91d3600\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ub1VpU2xpZGVyLnZ1ZT9lY2VkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2JywgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwidnVlLW5vdWlzbGlkZXJcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJpZFwiOiBfdm0uc2xpZGVySWRcbiAgICB9XG4gIH0pXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtZTkxZDM2MDBcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1lOTFkMzYwMFwifSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvbm9VaVNsaWRlci52dWVcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ })
/******/ ]);
});